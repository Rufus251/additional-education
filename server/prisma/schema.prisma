// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

//   id Int @id @default(autoincrement())
//   user   User @relation(fields: [userId], references: [id])
//   userId Int

// user
model User {
  id Int @id @default(autoincrement())

  phoneNum String?       @unique
  email    String?       @unique
  jwt      String?
  password String
  roles    RolesOnUser[]

  userInfo UserInfo?

  createdCourses  Courses[]
  createdBlogs    Blogs[]
  createdTests    Tests[]
  createdLections Videolections[]

  passedCourses  CoursesOnUser[]
  likedBlogs     BlogsOnUser[]
  //posted comments
  comments       Comment[]
  passedTests    TestsOnUser[]
  passedLections VideolectionsOnUser[]

  chats          UsersOnChat[]
  sendedMessages Messages[]
}

model UserInfo {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique

  // documents
  passportMain       String?
  passportAdditional String?
  diploma            String?

  //profile image
  profileImage String?

  // name
  name        String?
  familyName  String?
  surname     String?
  dateOfBirth String?

  // contacts
  contactPreferences String?
  whatsappNumber     Int?
  viberNumber        Int?
  TelegramNumber     Int?
  socialMedia        SocialMedia[]

  //passport data
  passportSeries Int?
  passportNumber Int?
  passportCode   Int?
  passportIssued String?
  IssueDate      String?
  INN            Int?
  SNILS          Int?

  //job info
  jobPlace String?
  jobPost  String?

  // education
  universityFullName  String?
  universityShortName String?
  educationLvl        String?
  registrationNumber  Int?
  diplomBlankNumber   Int?
  diplomDate          String?
}

model SocialMedia {
  id Int @id @default(autoincrement())

  userInfo   UserInfo @relation(fields: [userInfoId], references: [id])
  userInfoId Int

  socialMediaName String
  socialMediaUrl  String
}

// user end ============

// chat
model UsersOnChat {
  user   User @relation(fields: [userId], references: [id])
  userId Int

  chat   Chats @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId Int

  @@id([userId, chatId])
}

model Chats {
  id Int @id @default(autoincrement())

  connectedUsers UsersOnChat[]

  messages Messages[]
}

model Messages {
  id Int @id @default(autoincrement())

  chat   Chats @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId Int

  fromUser   User @relation(fields: [fromUserId], references: [id])
  fromUserId Int

  message String
}

// chat end =============

// roles
model RolesOnUser {
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  role   Roles @relation(fields: [roleId], references: [id])
  roleId Int

  @@id([userId, roleId])
}

model Roles {
  id Int @id @default(autoincrement())

  users RolesOnUser[]

  roleName String @unique
}

// roles end ===========

//for courses, blogs, lections, test sort
//Повышение квалификации, профессиональная переподготовка, видеолекции
model EducationType {
  id Int @id @default(autoincrement())

  course Courses[]

  name String
}

//Педагогика, психология, экономика, медицина
model Faculty {
  id Int @id @default(autoincrement())

  course  Courses[]
  blog    Blogs[]
  tests   Tests[]
  lection Videolections[]

  name String
}

// Удостоверение о повышении квалиф-ии, диплом о проф переподготовке, сертификат
model DiplomType {
  id Int @id @default(autoincrement())

  course Courses[]

  name String
}

// LowPrice, Популярные программы
model CourseAdditional {
  id Int @id @default(autoincrement())

  course CoursesToAdditional[]

  name String
}

model CoursesToAdditional {
  courses   Courses @relation(fields: [coursesId], references: [id], onDelete: Cascade)
  coursesId Int

  courseAdditional   CourseAdditional @relation(fields: [courseAdditionalId], references: [id])
  courseAdditionalId Int

  @@id([courseAdditionalId, coursesId])
}

//sort end ================

// course =============
model CoursesOnUser {
  user   User @relation(fields: [userId], references: [id])
  userId Int

  courses   Courses @relation(fields: [coursesId], references: [id], onDelete: Cascade)
  coursesId Int

  @@id([userId, coursesId])
}

model Courses {
  id Int @id @default(autoincrement())

  author   User @relation(fields: [authorId], references: [id])
  authorId Int

  passedUsers CoursesOnUser[]

  courseName String

  educationType   EducationType @relation(fields: [educationTypeId], references: [id])
  educationTypeId Int

  faculty   Faculty @relation(fields: [facultyId], references: [id])
  facultyId Int

  diplomType   DiplomType @relation(fields: [diplomTypeId], references: [id])
  diplomTypeId Int
  diplomImg    String

  courseToAdditional CoursesToAdditional[]

  minHours Int

  courseInfo CourseInfo?
}

model CourseInfo {
  id Int @id @default(autoincrement())

  course   Courses @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId Int     @unique

  authorName String?
  authorInfo AuthorInfo[]

  moduleAmount   Int?    @default(0)
  listenerAmount Int?    @default(0)
  minMaxHours    String?

  courseGoal        String?
  educationForm     String?
  certificationType String?

  sections Section[]
}

model AuthorInfo {
  id Int @id @default(autoincrement())

  courseInfo   CourseInfo @relation(fields: [courseInfoId], references: [id], onDelete: Cascade)
  courseInfoId Int

  aboutAuthor String
}

model Section {
  id Int @id @default(autoincrement())

  courseInfo   CourseInfo @relation(fields: [courseInfoId], references: [id], onDelete: Cascade)
  courseInfoId Int

  hoursAmount Int
  cost        Int
  cashback    Int?      @default(0)
  modules     Modules[]
}

model Modules {
  id Int @id @default(autoincrement())

  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId Int

  hoursAmount Int
  moduleName  String

  videoLessons   videoLesson[]
  lectionLessons lectionLesson[]
  testLessons    testLesson[]
  examLessons    examLesson[]
}

model videoLesson {
  id Int @id @default(autoincrement())

  module   Modules @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId Int

  queueNumber Int

  lessonName         String
  videoUrl           String
  descriptionHeader  String
  descriptionContent String

  homeworkName       String
  homeworkDesription String
  homeworkFile       String
}

model lectionLesson {
  id Int @id @default(autoincrement())

  module   Modules @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId Int

  lectionBlocks lectionBlock[]

  lessonName String

  queueNumber Int

  homeworkName       String
  homeworkDesription String
  homeworkFile       String
}

model lectionBlock {
  id Int @id @default(autoincrement())

  lectionLesson   lectionLesson @relation(fields: [lectionLessonId], references: [id], onDelete: Cascade)
  lectionLessonId Int

  header String?
  text   String?
  img    String?
}

model testLesson {
  id Int @id @default(autoincrement())

  module   Modules @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId Int

  lessonName String

  queueNumber Int

  descriptionHeader  String
  descriptionContent String
  timeForPass        Int
  questionsAmount    Int
  maxPoints          Int
  pointForPass       Int

  testQuestions testQuestion[]

  homeworkName       String
  homeworkDesription String
  homeworkFile       String
}

model testQuestion {
  id Int @id @default(autoincrement())

  testLesson   testLesson @relation(fields: [testLessonId], references: [id], onDelete: Cascade)
  testLessonId Int

  // radio, checkbox
  questionType String

  queueNumber Int

  questionHeader   String
  questionImg      String
  questionVariants testQuestionVariant[]
}

model testQuestionVariant {
  id Int @id @default(autoincrement())

  testQuestion   testQuestion @relation(fields: [testQuestionId], references: [id], onDelete: Cascade)
  testQuestionId Int

  queueNumber Int

  variantText String
  isTrue      Boolean
}

model examLesson {
  id Int @id @default(autoincrement())

  module   Modules @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId Int

  lessonName String

  queueNumber Int

  header String?
  text   String?
  img    String?

  homeworkName       String
  homeworkDesription String
  homeworkFile       String
}

// course end =============

// blogs
model BlogsOnUser {
  user   User @relation(fields: [userId], references: [id])
  userId Int

  blogs   Blogs @relation(fields: [blogsId], references: [id], onDelete: Cascade)
  blogsId Int

  @@id([userId, blogsId])
}

model Blogs {
  id Int @id @default(autoincrement())

  author   User @relation(fields: [authorId], references: [id])
  authorId Int

  likeFromUser BlogsOnUser[]

  blogInfo BlogInfo?

  faculty        Faculty   @relation(fields: [facultyId], references: [id])
  facultyId      Int

  blogImg        String
  blogTitle      String
  createdAt      DateTime? @default(now())
  views          Int?      @default(0)
}

model BlogInfo {
  id Int @id @default(autoincrement())

  blogs   Blogs @relation(fields: [blogsId], references: [id], onDelete: Cascade)
  blogsId Int   @unique

  blogBlocks BlogBlocks[]
  likes      Int @default(0)
  comments   Comment[]
}

model BlogBlocks {
  id Int @id @default(autoincrement())

  blogInfo   BlogInfo @relation(fields: [blogInfoId], references: [id], onDelete: Cascade)
  blogInfoId Int

  header   String?
  text     String?
  videoUrl String?
  audioUrl String?
  imgUrl   String?
}

model Comment {
  id Int @id @default(autoincrement())

  blogInfo   BlogInfo @relation(fields: [blogInfoId], references: [id], onDelete: Cascade)
  blogInfoId Int      

  user   User @relation(fields: [userId], references: [id])
  userId Int

  likesAmount Int    @default(0)
  commentText String
}

// blogs end =============

//test
model TestsOnUser {
  user   User @relation(fields: [userId], references: [id])
  userId Int

  tests   Tests @relation(fields: [testsId], references: [id])
  testsId Int

  @@id([userId, testsId])
}

model Tests {
  id Int @id @default(autoincrement())

  author   User @relation(fields: [authorId], references: [id])
  authorId Int

  passedUsers TestsOnUser[]

  testsInfo  TestsInfo?
  faculty    Faculty    @relation(fields: [facultyId], references: [id])
  facultyId  Int
  timeToPass Int
  askAmount  Int
  authorName String
}

model TestsInfo {
  id Int @id @default(autoincrement())

  test   Tests @relation(fields: [testId], references: [id])
  testId Int   @unique

  testName        String
  testHeader      String
  testDescription String
  pointsToPass    Int
  timeToPass      Int
  tasks           TestTasks[]
}

model TestTasks {
  id Int @id @default(autoincrement())

  testInfo   TestsInfo @relation(fields: [testInfoId], references: [id])
  testInfoId Int       @unique

  taskTitle      String
  //checkbox / radiobtn
  taskType       String
  answerVariants TestTasks_answerVariant[]
}

model TestTasks_answerVariant {
  id Int @id @default(autoincrement())

  testTasks   TestTasks @relation(fields: [testTasksId], references: [id])
  testTasksId Int

  isRight     Boolean
  variantText String
}

// test end ==========

// lections
model VideolectionsOnUser {
  user   User @relation(fields: [userId], references: [id])
  userId Int

  Videolections   Videolections @relation(fields: [VideolectionsId], references: [id], onDelete: Cascade)
  VideolectionsId Int

  @@id([userId, VideolectionsId])
}

model Videolections {
  id Int @id @default(autoincrement())

  Author   User @relation(fields: [AuthorId], references: [id])
  AuthorId Int

  passedUsers VideolectionsOnUser[]

  VideolectionInfo VideolectionInfo?

  faculty     Faculty      @relation(fields: [facultyId], references: [id])
  facultyId   Int

  lectionImg  String
  lectionName String
  createdAt   DateTime     @default(now())
  views       Int          @default(0)
}

model VideolectionInfo {
  id Int @id @default(autoincrement())

  Videolection   Videolections @relation(fields: [VideolectionId], references: [id], onDelete: Cascade)
  VideolectionId Int      @unique

  videoLectionURL      String?
  diplomForPass     String?
  descriptionHeader String?
  description       String?
}

// lections end ===========
